{"version":3,"sources":["config/reducers/nominationReducer.js","config/reducers/resultReducer.js","config/reducers/modeReducer.js","config/store.js","utils/API.js","components/SearchBar.js","components/ResultCard.js","images/no-img.png","components/ResultsContainer.js","components/NominationCard.js","components/NominationContainer.js","images/dark.png","images/light.png","images/bg-dark.png","images/bg-light.png","components/ModeButton.js","components/Hero.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","nominations","nominationReducer","state","action","type","payload","results","resultReducer","mode","modeReducer","rootReducer","combineReducers","nomination","result","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","API","searchByTitle","query","axios","get","Alert","props","elevation","variant","useStyles","makeStyles","theme","form","marginBottom","marginLeft","marginTop","searchBar","width","border","borderRadius","padding","backgroundColor","button","color","height","text","textAlign","SearchBar","classes","useState","search","searchState","setSearchState","openState","setOpenState","handleClose","event","reason","handleSubmit","e","preventDefault","then","res","data","Response","dispatch","getState","Search","localStorage","setItem","JSON","stringify","noValidate","autoComplete","onSubmit","className","Snackbar","open","autoHideDuration","onClose","severity","InputBase","id","placeholder","name","onChange","target","value","Button","onClick","root","minWidth","minHeight","maxWidth","maxHeight","boxShadow","content","paddingTop","media","marginRight","spacing","fontSize","margin","fontWeight","ResultCard","Card","data-key","CardActionArea","Tooltip","title","longTitle","CardMedia","image","Poster","Title","CardContent","Typography","Year","CardActions","indexOf","size","existingNominations","length","newNominations","concat","disabled","connect","Grid","container","map","item","xs","slice","noImg","imdbID","NominationCard","filter","nom","justify","zIndex","resultCards","document","querySelectorAll","resultText","lightMode","querySelector","setAttribute","bgLight","i","bgDark","darkMode","src","dark","light","alt","heroImage","backgroundImage","backgroundRepeat","backgroundSize","position","heroText","top","left","transform","Hero","App","useEffect","getItem","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.261ee8dd.chunk.js","sourcesContent":["const initialState = {\n    nominations: []\n};\n\nconst nominationReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'CHANGE_NOMINATIONS':\n            return {\n                ...action.payload\n            }\n        default: \n        return state\n    }\n};\n\nexport default nominationReducer;","const initialState = {\n    results: []\n};\n\nconst resultReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SEARCH_MOVIES':\n            return {\n                ...action.payload\n            }\n        default: \n            return state\n    }\n};\n\nexport default resultReducer;","const initialState = {\n    mode: 'Light'\n}\n\nconst modeReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'SWITCH_MODE':\n            return {\n                ...action.payload\n            }\n        default: \n        return state\n    }\n};\n\nexport default modeReducer;","import { createStore, combineReducers } from 'redux';\nimport nominationReducer from './reducers/nominationReducer';\nimport resultReducer from './reducers/resultReducer';\nimport modeReducer from './reducers/modeReducer';\n\nconst rootReducer = combineReducers({\n    nomination: nominationReducer,\n    result: resultReducer,\n    mode: modeReducer\n});\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store;\n","import axios from 'axios';\n\nconst URL_PREFIX = 'https://www.omdbapi.com/?s='\nconst API_KEY = '&apikey=6dfb3408'\n\nconst API = {\n    searchByTitle: query => {\n        return axios.get(`${URL_PREFIX}${query}${API_KEY}`)\n    }\n}\n\nexport default API;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { InputBase, Button, Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport API from '../utils/API';\nimport store from '../config/store';\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        marginBottom: '5vh',\n        marginLeft: '5vw',\n        marginTop: '5vh'\n    },\n    searchBar: {\n        width: '90vw',\n        border: '1px solid black',\n        borderRadius: '5px',\n        padding: '5px',\n        backgroundColor: 'rgba(212, 211, 221, .3)',\n        marginBottom: '2vh'\n    },\n    button: {\n        width: '5vw',\n        backgroundColor: 'rgba(212, 211, 221, .8)',\n        color: 'rgba(0,0,0,.8)',\n        height: '20px'\n    },\n    text: {\n        color: 'rgba(0,0,0,.8)',\n        textAlign: 'center'\n    }\n}));\n\nconst SearchBar = (props) => {\n    const classes = useStyles();\n\n    const [searchState, setSearchState] = useState({\n        search: ''\n    });\n    const [openState, setOpenState] = useState(false)\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        setSearchState({\n            ...searchState,\n            [name]: value\n        });\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenState(false);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        API.searchByTitle(searchState.search).then(res => {\n            if (res.data.Response === 'False') {\n                setOpenState(true)\n            } else {\n                store.dispatch({\n                    type: 'SEARCH_MOVIES',\n                    payload: {\n                        ...store.getState().result,\n                        results: res.data.Search\n                    }\n                });\n                localStorage.setItem('searchResults', JSON.stringify(res.data.Search))\n            }\n        });\n    }\n\n    return (\n        <form noValidate autoComplete=\"off\" onSubmit={handleSubmit} className={classes.form}>\n            <Snackbar open={openState} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    Oops! We couldn't find what you're looking for. Try again!\n                </Alert>\n            </Snackbar>\n            <h1 className={`${classes.text} result-text`}>Search for a movie</h1>\n            <InputBase id=\"outlined-basic\" placeholder=\"Search\" variant=\"outlined\" name=\"search\" onChange={handleInputChange} className={`${classes.searchBar} search-bar`} />\n            <br />\n            <Button variant=\"contained\" onClick={handleSubmit} className={classes.button} id='submit-button'>Submit</Button>\n        </form>\n        \n    )\n}\n\nexport default SearchBar;","import React, { useState } from 'react';\nimport { makeStyles, Card, Button, Snackbar, CardActionArea, CardActions, CardContent, CardMedia, Typography, Tooltip } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport store from '../config/store';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: '10vw',\n        minHeight: '30vh',\n        maxWidth: '30vw',\n        maxHeight: '30vh',\n        boxShadow: '0 8px 16px 0',\n        backgroundColor: 'rgba(212, 211, 221, .7)'\n    },\n    content: {\n        minWidth: '100%',\n        minHeight: '100%',\n        maxWidth: '50px',\n        maxHeight: '50px',\n        paddingTop: '5px',\n    },\n    media: {\n        maxWidth: '100%',\n        minHeight: '150px',\n        maxHeight: '150px',\n        minWidth: '100%',\n        marginRight: theme.spacing(-1)\n    },\n    text: {\n        fontSize: '.9em',\n        margin: '0px',\n        fontWeight: 'bold',\n        color: 'rgba(0,0,0,.8)'\n    },\n    button: {\n        margin: theme.spacing(-1),\n        fontSize: '.9em',\n        height: '2vh',\n        color: 'rgba(0,0,0,.8)'\n    }\n}));\n\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst ResultCard = (props) => {\n    const classes = useStyles();\n    const [openState, setOpenState] = useState(false)\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenState(false);\n    };\n\n    const nominateMe = () => {\n        const existingNominations = store.getState().nomination.nominations\n        if (existingNominations.length >= 5) {\n            setOpenState(true)\n        } else if (existingNominations.indexOf(props) === -1) {\n            const newNominations = existingNominations.concat(props)\n            store.dispatch({\n                type: 'CHANGE_NOMINATIONS',\n                payload: {\n                    ...store.getState().nomination,\n                    nominations: newNominations\n                }\n            });\n            localStorage.setItem('nominations', JSON.stringify(newNominations))\n        }\n\n    }\n\n    return (\n        <div>\n            <Snackbar open={openState} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    Oops! You have too many nominations! Remove one, or clear them all to nominate new movies.\n                </Alert>\n            </Snackbar>\n\n            <Card data-key={props.id} className={`${classes.root} result-card`}>\n                <CardActionArea>\n                    <Tooltip title={props.longTitle}>\n                        <CardMedia\n                            className={classes.media}\n                            image={props.Poster}\n                            title={props.Title}\n                        />\n                    </Tooltip>\n                    <CardContent className={classes.content}>\n                        <Typography className={`${classes.text} result-text`}>\n                            {props.Title}\n                        </Typography>\n                        <Typography className={`${classes.text} result-text`}>\n                            {props.Year}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <CardActions>\n                    {store.getState().nomination.nominations.indexOf(props) === -1 ?\n                        <Button size=\"small\" color=\"primary\" onClick={nominateMe} className={`${classes.button} result-text`}>\n                            Nominate\n                        </Button> :\n                        <Button variant=\"contained\" disabled className={`${classes.button} result-text`}>\n                            Already nominated\n                        </Button>}\n                </CardActions>\n            </Card>\n        </div>\n    )\n}\n\nexport default ResultCard;","export default __webpack_public_path__ + \"static/media/no-img.67f4402d.png\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, Grid} from '@material-ui/core';\nimport ResultCard from './ResultCard';\nimport noImg from '../images/no-img.png';\n\nconst useStyles = makeStyles({\n    results: {\n        marginLeft: '5vw',\n        marginRight: '5vw',\n        marginTop: '5vh',\n        marginBottom: '5vh'\n    }\n});\n\nconst ResultsContainer = (props) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.results}>\n        <Grid container spacing={2}>\n            {props.results.map(result => (\n                <Grid item xs={2}>\n                    <ResultCard\n                        longTitle={result.Title}\n                        Title={result.Title.length>20 ? `${result.Title.slice(0, 20)}...` : result.Title}\n                        Year={result.Year}\n                        Poster={result.Poster === 'N/A' ? `${noImg}` : result.Poster}\n                        key={result.imdbID}\n                        id={result.imdbID} />\n                </Grid>\n            ))}\n        </Grid>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        ...state.result\n    }\n};\n\nexport default connect(mapStateToProps)(ResultsContainer);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, Tooltip, CardActionArea, CardActions, CardContent, CardMedia, Button, Typography } from '@material-ui/core';\nimport store from '../config/store';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: '10vw',\n        minHeight: '30vh',\n        maxWidth: '30vw',\n        maxHeight: '30vh',\n        boxShadow: '0 8px 16px 0',\n        backgroundColor: 'rgba(212, 211, 221, .7)'\n    },\n    content: {\n        minWidth: '100%',\n        minHeight: '100%',\n        maxWidth: '50px',\n        maxHeight: '50px',\n        paddingTop: '5px',\n    },\n    media: {\n        maxWidth: '100%',\n        minHeight: '150px',\n        maxHeight: '150px',\n        minWidth: '100%',\n        marginRight: theme.spacing(-1)\n    },\n    text: {\n        fontSize: '.9em',\n        margin: '0px',\n        fontWeight: 'bold',\n        color: 'rgba(0,0,0,.8)'\n    },\n    button: {\n        margin: theme.spacing(-1),\n        fontSize: '.9em',\n        height: '2vh',\n        color: 'rgba(0,0,0,.8)'\n    }\n}));\n\nconst NominationCard = (props) => {\n    const classes = useStyles();\n\n    const removeMe = () => {\n        const noms = store.getState().nomination.nominations\n        const newNominations = noms.filter(nom => nom.Poster !== props.Poster)\n        store.dispatch({\n            type: 'CHANGE_NOMINATIONS',\n            payload: {\n                ...store.getState().nomination,\n                nominations: newNominations\n            }\n        });\n        localStorage.setItem('nominations', JSON.stringify(newNominations))\n    }\n\n    return (\n        <Card data-key={props.id} className={`${classes.root} result-card`}>\n                <CardActionArea>\n                        <CardMedia\n                            className={classes.media}\n                            image={props.Poster}\n                            title={props.Title}\n                        />\n                        <Tooltip title={props.longTitle}>\n                    <CardContent className={classes.content}>\n                        <Typography className={`${classes.text} result-text`}>\n                            {props.Title}\n                        </Typography>\n                        <Typography className={`${classes.text} result-text`}>\n                            {props.Year}\n                        </Typography>\n                    </CardContent>\n                    </Tooltip>\n                </CardActionArea>\n                <CardActions>\n                        <Button size=\"small\" color=\"primary\" onClick={removeMe} className={`${classes.button} result-text`}>\n                            Remove\n                        </Button> \n                </CardActions>\n            </Card>\n            \n    )\n}\n\nexport default NominationCard;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, Grid, Button } from '@material-ui/core';\nimport store from '../config/store';\nimport noImg from '../images/no-img.png';\nimport NominationCard from './NominationCard';\n\nconst useStyles = makeStyles({\n    nominations: {\n        marginLeft: '25vw'\n    },\n    text: {\n        color: 'rgba(0,0,0,.8)',\n        textAlign: 'center'\n    },\n    button: {\n        backgroundColor: 'rgba(212, 211, 221, .8)',\n        color: 'rgba(0,0,0,.8)',\n        height: '30px',\n        marginTop: '2vh',\n        marginLeft: '2vw'\n    }\n});\n\nconst NominationContainer = (props) => {\n    const classes = useStyles();\n\n    const deleteMe = () => {\n        store.dispatch({\n            type: 'CHANGE_NOMINATIONS',\n            payload: {\n                ...store.getState().nomination,\n                nominations: []\n            }\n        });\n        localStorage.setItem('nominations', JSON.stringify([]))\n    }\n\n    return (\n        <div className={classes.nominations}>\n            <h1 className={`${classes.text} result-text`}>{props.nominations.length ? 'You have nominated the following movies for awards!' : 'You have not nominated any movies for awards yet!'}</h1>\n            <Grid container spacing={2} justify='space-evenly'>\n                { props.nominations.map(nomination => (\n                    <Grid item xs={2}>\n                        <NominationCard\n                            longTitle={nomination.Title}\n                            Title={nomination.Title.length > 20 ? `${nomination.Title.slice(0, 20)}...` : nomination.Title}\n                            Year={nomination.Year}\n                            Poster={nomination.Poster === 'N/A' ? `${noImg}` : nomination.Poster}\n                            key={nomination.imdbID}\n                            id={nomination.imdbID} />\n                    </Grid>\n                ))}\n            </Grid>\n            \n            {props.nominations.length ? <Button variant=\"contained\" onClick={deleteMe} className={classes.button} id='clear-button'>Clear All Nominations</Button> : <div id='clear-button'/>}\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        ...state.nomination\n    }\n};\n\nexport default connect(mapStateToProps)(NominationContainer);","export default __webpack_public_path__ + \"static/media/dark.2a778799.png\";","export default __webpack_public_path__ + \"static/media/light.7b519480.png\";","export default __webpack_public_path__ + \"static/media/bg-dark.e9ca304a.png\";","export default __webpack_public_path__ + \"static/media/bg-light.bfc08df5.png\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, Tooltip } from '@material-ui/core/';\nimport store from '../config/store';\nimport dark from '../images/dark.png';\nimport light from '../images/light.png';\nimport bgDark from '../images/bg-dark.png';\nimport bgLight from '../images/bg-light.png';\n\nconst useStyles = makeStyles(() => ({\n    image: {\n        height: '10vh'\n    },\n    button: {\n        backgroundColor: 'rgba(255, 255, 255, 0)',\n        border: 'none',\n        marginLeft: '1vw',\n        marginTop: '2vh',\n        zIndex: '100'\n    }\n}));\n\nconst ModeButton = (props) => {\n    const classes = useStyles();\n\n    const switchMode = () => {\n        const mode = store.getState().mode.mode;\n        let resultCards = document.querySelectorAll('.result-card');\n        let resultText = document.querySelectorAll('.result-text');\n\n        const darkMode = () => {\n            document.querySelector('body').setAttribute('style', 'background-image: url(' + `${bgDark}` + ')');\n            document.querySelector('#hero-image').setAttribute('style', 'background-image: linear-gradient(to bottom, #000000, #434343, rgba(0, 0, 0, 0))');\n            document.querySelector('#hero-text').setAttribute('style', 'color: rgba(255, 255, 255, .8)');\n            document.querySelector('#submit-button').setAttribute('style', 'background-color: #434343; color: rgba(255, 255, 255, .8)');\n            document.querySelector('#clear-button').setAttribute('style', 'background-color: #434343; color: rgba(255, 255, 255, .8)');\n            document.querySelector('.search-bar').setAttribute('style', 'background-color: rgba(67, 67, 67, .3); color: rgba(255, 255, 255, .8)');\n            for(let i=0; i<resultCards.length; i++) {\n                resultCards[i].setAttribute('style', 'background-color: rgba(67, 67, 67, 1)')\n            }\n            for(let i=0; i<resultText.length; i++) {\n                resultText[i].setAttribute('style', 'color: rgba(255, 255, 255, .8)')\n            }\n        }\n\n        const lightMode = () => {\n            document.querySelector('body').setAttribute('style', 'background-image: url(' + `${bgLight}` + ')');\n            document.querySelector('#hero-image').setAttribute('style', 'linear-gradient(to bottom, #D4D3DD, #EFEFBB, rgba(0, 0, 0, 0))');\n            document.querySelector('#hero-text').setAttribute('style', 'color: rgba(0,0,0,.8)');\n            document.querySelector('#submit-button').setAttribute('style', 'background-color: rgba(212, 211, 221, .8); color: rgba(0,0,0,.8)');\n            document.querySelector('#clear-button').setAttribute('style', 'background-color: rgba(212, 211, 221, .8); color: rgba(0,0,0,.8)');\n            document.querySelector('.search-bar').setAttribute('style', 'background-color: rgba(212, 211, 221, .7); color: rgba(0,0,0,.8)');\n            for(let i=0; i<resultCards.length; i++) {\n                resultCards[i].setAttribute('style', 'background-color: rgba(212, 211, 221, .7)')\n            }\n            for(let i=0; i<resultText.length; i++) {\n                resultText[i].setAttribute('style', 'color: color: rgba(0,0,0,.8)')\n            }\n        }\n\n        switch (mode) {\n            case 'Light':\n                darkMode();\n                store.dispatch({\n                    type: 'SWITCH_MODE',\n                    payload: {\n                        ...store.getState().mode,\n                        mode: 'Dark'\n                    }\n                });\n                localStorage.setItem('mode', 'Dark')\n                break;\n            case 'Dark':\n                lightMode();\n                store.dispatch({\n                    type: 'SWITCH_MODE',\n                    payload: {\n                        ...store.getState().mode,\n                        mode: 'Light'\n                    }\n                });\n                localStorage.setItem('mode', 'Light')\n                break;\n            default:\n                lightMode();\n                store.dispatch({\n                    type: 'SWITCH_MODE',\n                    payload: {\n                        ...store.getState().mode,\n                        mode: 'Light'\n                    }\n                });\n                localStorage.setItem('mode', 'Light')\n        }\n    }\n    \n    return (\n        <div>\n            <Tooltip title={props.mode === 'Light' ? 'Dark Mode' : 'Light Mode'}>\n                <button onClick={switchMode} className={classes.button}>\n                    <img src={props.mode === 'Light' ? `${dark}` : `${light}`} alt={props.mode === 'Light' ? 'Dark Mode' : 'Light Mode'} className={classes.image}></img>\n                </button>\n            </Tooltip>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        ...state.mode\n    }\n};\n\nexport default connect(mapStateToProps)(ModeButton);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ModeButton from './ModeButton';\n\nconst useStyles = makeStyles({\n    heroImage: {\n        backgroundImage: 'linear-gradient(to bottom, #D4D3DD, #EFEFBB, rgba(0, 0, 0, 0))',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        position: 'relative',\n        height: '40vh',\n        width: '110vw'\n    }, \n    heroText: {\n        textAlign: 'center',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        color: 'rgba(0,0,0,.8)',\n        transform: 'translate(-50%, -75%)',\n    }\n})\n\nconst Hero = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.heroImage} id='hero-image'>\n            <ModeButton />\n            <div className={classes.heroText} id='hero-text'>\n                <h1>Welcome to your movie dashboard!</h1>\n                <h3>Browse movies and nominate up to 5 favorites for awards!</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default Hero;","import React, { useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\nimport store from './config/store'\nimport SearchBar from './components/SearchBar';\nimport ResultsContainer from './components/ResultsContainer';\nimport NominationContainer from './components/NominationContainer';\nimport Hero from './components/Hero';\n\n\nfunction App() {\n  useEffect(() => {\n    if (localStorage.getItem('searchResults')) {\n      store.dispatch({\n        type: 'SEARCH_MOVIES',\n        payload: {\n          ...store.getState().result,\n          results: JSON.parse(localStorage.getItem('searchResults'))\n        }\n      });\n    }\n\n    if (localStorage.getItem('nominations')) {\n      store.dispatch({\n        type: 'CHANGE_NOMINATIONS',\n        payload: {\n          ...store.getState().nomination,\n          nominations: JSON.parse(localStorage.getItem('nominations'))\n        }\n      });\n    }\n\n    if (localStorage.getItem('mode')) {\n      store.dispatch({\n        type: 'SWITCH_MODE',\n        payload: {\n          ...store.getState().mode,\n          mode: localStorage.getItem('mode')\n        }\n      });\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={3}>\n        <Hero />\n      </Grid>\n      <Grid container spacing={3}>\n      <NominationContainer />\n      </Grid>\n      <Grid container spacing={3}>\n        <SearchBar />\n      </Grid>\n      <Grid container spacing={3}>\n        <ResultsContainer />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './config/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}